# Conventional Commits Template

# <type>[optional scope]: <description>
#
# [optional body]
#
# [optional footer(s)]
#
# Types:
#   feat     (new feature for the user, not a new feature for build script)
#   fix      (bug fix for the user, not a fix to a build script)
#   docs     (changes to the documentation)
#   style    (formatting, missing semi colons, etc; no production code change)
#   refactor (refactoring production code, eg. renaming a variable)
#   test     (adding missing tests, refactoring tests; no production code change)
#   chore    (updating grunt tasks etc; no production code change)
#   ci       (changes to CI configuration files and scripts)
#   perf     (a code change that improves performance)
#   revert   (reverts a previous commit)
#
# Scopes:
#   Examples: (auth), (api), (ui), (db), etc.
#
# Examples:
#   feat(auth): add user authentication system
#   fix(api): resolve login validation issue
#   docs: update API documentation
#   style: format code according to style guide
#   refactor: simplify user service logic
#   test: add unit tests for user service
#   chore: update dependencies
#   ci: add GitHub Actions workflow
#   perf: optimize database queries
#   revert: revert "feat: add user authentication system"
#
# Breaking changes should start with "BREAKING CHANGE: " followed by a description
# Example: BREAKING CHANGE: API endpoints now require authentication
#
# Footer can contain references to issues:
# Closes #123
# Fixes #456
# Related to #789
